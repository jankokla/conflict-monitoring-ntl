{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Analysis of Satellite Sensor Data in Humanitarian Crisis Contexts","text":"<p>This project aims to systematically compare satellite sensors for monitoring humanitarian crises, with a particular focus on rural crisis-affected regions such as Myanmar and South Sudan.</p>"},{"location":"analysis/ideation/","title":"Ideation","text":""},{"location":"analysis/ideation/#plotting","title":"Plotting","text":"<p>DN / radiance comparison and correlation between sensors<sup>1</sup>:</p> <p></p> <p>Pixel value comparisons for the transect lines (<sup>1</sup> and <sup>2</sup>):</p> <p></p> <p>Nice overview plot<sup>3</sup>:</p> <p></p> <p>Better scatterplots with DN values<sup>3</sup>:</p> <p></p> <p>Some cool frameworks:</p> <ul> <li>dashboard example</li> <li>NDVI example -&gt; radiance</li> <li>4 tiles reacting at the same time</li> </ul>"},{"location":"analysis/ideation/#indexes-statistical-tests","title":"Indexes / Statistical Tests","text":"<ul> <li>Sum of total light (SOTL)<sup>1</sup> (mentioned only once and not explained)</li> <li>Sum of Lights (SoL)<sup>4</sup> - sum of intensity values over the region</li> <li>ANOVA for pixel wise comparison?</li> </ul>"},{"location":"analysis/ideation/#other-notes","title":"Other Notes","text":"<ul> <li>How to get from DN to L (radiance): SDGSat<sup>5</sup></li> </ul>"},{"location":"analysis/ideation/#how-to-go-about-it","title":"How to Go About It","text":"<ul> <li>[] Create proper reader for GHS-POP data: provide GDF and extract the patch (collate when necessary)</li> <li>[] Convert DN to radiance for SDGSat<sup>5</sup></li> <li>[] Resample GHS-POP and SDGSat to 15-arc second resolution (comparable to Black Marble)</li> <li>[] Stack rasters for better analysis ...</li> </ul> <ol> <li> <p>Guo, B., Hu, D., &amp; Zheng, Q. (2023). Potentiality of SDGSAT-1 glimmer imagery to investigate the spatial variability in nighttime lights. International Journal of Applied Earth Observation and Geoinformation, 119, 103313. https://doi.org/10.1016/j.jag.2023.103313\u00a0\u21a9\u21a9\u21a9</p> </li> <li> <p>Weber, D., Bolliger, J., Ecker, K., Fischer, C., Ginzler, C., Gossner, M. M., Huber, L., Obrist, M. K., Zellweger, F., &amp; Levin, N. (2025). Night lights from space: potential of SDGSAT\u20101 for ecological applications. Remote Sensing in Ecology and Conservation. https://doi.org/10.1002/rse2.70011\u00a0\u21a9</p> </li> <li> <p>Jiang, W., He, G., Long, T., Guo, H., Yin, R., Leng, W., Liu, H., &amp; Wang, G. (2018). Potentiality of Using Luojia 1-01 Nighttime Light Imagery to Investigate Artificial Light Pollution. Sensors, 18(9), 2900. https://doi.org/10.3390/s18092900\u00a0\u21a9\u21a9</p> </li> <li> <p>Mokhtari, Z., Bergantino, A. S., Intini, M., Elia, M., Buongiorno, A., Giannico, V., Sanesi, G., &amp; Lafortezza, R. (2025). Nighttime light extent and intensity explain the dynamics of human activity in coastal zones. Scientific Reports, 15(1). https://doi.org/10.1038/s41598-025-85917-z\u00a0\u21a9</p> </li> <li> <p>Wang, Y., Huang, H., &amp; Wu, B. (2025). Evaluating the Potential of SDGSAT-1 Glimmer Imagery for Urban Road Detection. IEEE Journal of Selected Topics in Applied Earth Observations and Remote Sensing, 18, 785\u2013794. https://doi.org/10.1109/jstars.2024.3502218\u00a0\u21a9\u21a9</p> </li> </ol>"},{"location":"analysis/satellites/","title":"Satellites","text":"<p>The following satellites are widely used in nighttime light (NTL) analysis and urban monitoring:</p> <ul> <li>Landsat 8: NASA\u2013USGS satellite for global land monitoring, optimized for daytime land cover and change analysis.</li> <li>SDGSAT-1: Chinese Academy of Sciences satellite designed for SDG studies, featuring dedicated nighttime lights imaging.</li> <li>EnMAP: German hyperspectral satellite focused on environmental, land, and water quality mapping, mainly under daylight.</li> <li>Black Marble (VIIRS DNB): NASA\u2019s global nighttime lights data product, providing daily radiance maps.</li> </ul> Spectral Bands <p>Only spectral bands relevant to nighttime light (NTL) analysis are shown below.</p> Satellite Spectral Bands Imaging Time (local time) Coverage Frequency Resolution Products Landsat 8 Coastal aerosol + RGB 10:00 AM (daylight only) Every 16 days 30 m SDGSAT-1 Glimmer (Panchromatic + RGB) 9:30 PM (nighttime lights) Every 11 days P: 10 m, RGB: 40 m EnMAP RGB (VNIR bands) 11:00 AM (daylight only) Every 27 days 30 m Black Marble Day/Night Band (DNB) 1:30 AM (nightly) Daily (global) 500 m Sun-Synchronous Orbit <p>EnMAP and Landsat 8 are sun-synchronous satellites, acquiring images during consistent daylight hours for each location. As a result, standard data from these satellites do not include nighttime photos. However, one can ask special photos, which might also be during the nighttime.</p>"},{"location":"analysis/satellites/#sdgsat-1","title":"SDGSAT-1","text":"<p>SDGSAT-1 is equipped with the Glimmer sensor, featuring a panchromatic band at 10-meter resolution.</p> <p>Panchromatic</p> <p>A panchromatic band captures light from the red, green, and blue visible spectrum and merges it into a single channel. This maximizes image brightness and spatial detail, resulting in sharp black-and-white imagery while sacrificing color information for higher ground resolution.</p> <p>The Glimmer panchromatic imaging mode includes three gain bands <sup>1</sup>:</p> <ul> <li>Panchromatic Low (PL):   Records lower-intensity light, beneficial for brightly lit scenes to prevent saturation.</li> <li>Panchromatic High (PH):   Uses higher sensitivity for detecting faint signals, ideal for low-light or nighttime imaging.</li> <li>High Dynamic Range (HDR):   Merges PL and PH signals to retain details in both bright and dark areas, expanding dynamic range beyond single-gain limitations.</li> </ul>"},{"location":"analysis/satellites/#technical-details","title":"Technical Details","text":"<ul> <li> <p>Coordinate Reference System:   EPSG:32631</p> </li> <li> <p>Bit Depth:   12-bit unsigned integer (range: 0\u20134095)</p> </li> </ul> <ol> <li> <p>Zhao, Z., Qiu, S., Chen, F., Chen, Y., Qian, Y., Cui, H., Zhang, Y., Khoramshahi, E., &amp; Qiu, Y. (2023). Vessel Detection with SDGSAT-1 Nighttime Light Images. Remote Sensing, 15(17), 4354. https://doi.org/10.3390/rs15174354 \u21a9</p> </li> </ol>"},{"location":"notebooks/data_analysis/","title":"Data Analysis","text":"In\u00a0[1]: Copied! <pre>import numpy as np\nimport hvplot.xarray\nimport holoviews as hv\nfrom rasterio.enums import Resampling\n\nfrom conflict_monitoring_ntl.case_studies import get_county_ids, get_date\nfrom conflict_monitoring_ntl.viz import plot_tile_comparison, plot_binary\nfrom conflict_monitoring_ntl.utils import get_gdf_for_admin\nfrom conflict_monitoring_ntl.satellites import BlackMarble, SDGSat\nfrom conflict_monitoring_ntl.transform import RasterPipeline\n</pre> import numpy as np import hvplot.xarray import holoviews as hv from rasterio.enums import Resampling  from conflict_monitoring_ntl.case_studies import get_county_ids, get_date from conflict_monitoring_ntl.viz import plot_tile_comparison, plot_binary from conflict_monitoring_ntl.utils import get_gdf_for_admin from conflict_monitoring_ntl.satellites import BlackMarble, SDGSat from conflict_monitoring_ntl.transform import RasterPipeline In\u00a0[2]: Copied! <pre>import warnings\nwarnings.filterwarnings('ignore',\n    message='Connection pool is full, discarding connection*',\n    module='urllib3.connectionpool'\n)\n</pre> import warnings warnings.filterwarnings('ignore',     message='Connection pool is full, discarding connection*',     module='urllib3.connectionpool' ) In\u00a0[3]: Copied! <pre>import logging\nlogging.getLogger(\"pyogrio._io\").setLevel(logging.WARNING)\n</pre> import logging logging.getLogger(\"pyogrio._io\").setLevel(logging.WARNING) In\u00a0[4]: Copied! <pre>SDGSAT_THRESHOLDS = np.arange(1.0, 2.1, 0.1).tolist()\nBM_THRESHOLDS = np.arange(0.5, 2.1, 0.1).tolist()\n</pre> SDGSAT_THRESHOLDS = np.arange(1.0, 2.1, 0.1).tolist() BM_THRESHOLDS = np.arange(0.5, 2.1, 0.1).tolist() In\u00a0[5]: Copied! <pre>rasters = [SDGSat(), BlackMarble()]\n</pre> rasters = [SDGSat(), BlackMarble()] <p>Radiance Conversion and Band Scaling</p> <ul> <li>L denotes the radiance intensity at the entrance pupil of the sensor.</li> <li>L is measured in units of W/m\u00b2/sr/\u00b5m (watts per square meter per steradian per micrometer).</li> <li>DN represents the original digital number (pixel value) of the image.</li> <li>Gain is the amplification factor; Bias is the offset for radiometric calibration.</li> </ul> <p>Radiance Calculation</p> <p>$$ L = DN \\times \\text{Gain} + \\text{Bias} $$</p> <p>Conversion to <code>nW/cm\u00b2/sr</code></p> <p>To convert GLI band radiance to the brightness unit <code>nW/cm\u00b2/sr</code>(same as Black Marble), multiply by the bandwidth (in microns) and a SI scaling factor.</p> <p>$$ \\text{Radiance}_{(\\text{nW}/\\text{cm}^2/\\text{sr})} = L_{(\\text{W}/\\text{m}^2/\\text{sr}/\\mu\\text{m})} \\times 10^5 \\times \\text{bandwidth}_{\\mu\\text{m}} $$</p> In\u00a0[6]: Copied! <pre>country = \"Sudan\"\ndate, county_id = get_date(country), get_county_ids(country)[0]\ncounty_gdf = get_gdf_for_admin(county_id)\n\ntransformations = [{\"reproject_match\": {\"resampling\": Resampling.bilinear}}, {}]\npipeline = RasterPipeline(county_gdf, date, rasters, transformations)\nds = pipeline.run()\n</pre> country = \"Sudan\" date, county_id = get_date(country), get_county_ids(country)[0] county_gdf = get_gdf_for_admin(county_id)  transformations = [{\"reproject_match\": {\"resampling\": Resampling.bilinear}}, {}] pipeline = RasterPipeline(county_gdf, date, rasters, transformations) ds = pipeline.run() In\u00a0[7]: Copied! <pre>plot_tile_comparison(\n    arr_left=ds.sdgsat_radiance,\n    arr_right=ds.black_marble_radiance,\n    title_left=\"SDGSat radiance (nW/cm\u00b2/sr)\",\n    title_right=\"Black Marble radiance (nW/cm\u00b2/sr)\",\n    clim_left=(7, 7.5),\n    clim_right=(0, 2)\n)\n</pre> plot_tile_comparison(     arr_left=ds.sdgsat_radiance,     arr_right=ds.black_marble_radiance,     title_left=\"SDGSat radiance (nW/cm\u00b2/sr)\",     title_right=\"Black Marble radiance (nW/cm\u00b2/sr)\",     clim_left=(7, 7.5),     clim_right=(0, 2) ) Out[7]: In\u00a0[8]: Copied! <pre>binary_dict_sdgsat = {t: plot_binary(ds.sdgsat_dn, \"SDGSat\", t) for t in SDGSAT_THRESHOLDS}\nhv.HoloMap(binary_dict_sdgsat, kdims='threshold')\n</pre> binary_dict_sdgsat = {t: plot_binary(ds.sdgsat_dn, \"SDGSat\", t) for t in SDGSAT_THRESHOLDS} hv.HoloMap(binary_dict_sdgsat, kdims='threshold') Out[8]: In\u00a0[9]: Copied! <pre>curve_dict_bm = {t: plot_binary(ds.black_marble_radiance, \"Black Marble\", t) for t in BM_THRESHOLDS}\nhv.HoloMap(curve_dict_bm, kdims='threshold')\n</pre> curve_dict_bm = {t: plot_binary(ds.black_marble_radiance, \"Black Marble\", t) for t in BM_THRESHOLDS} hv.HoloMap(curve_dict_bm, kdims='threshold') Out[9]: Out[11]: Out[12]: Out[13]: Out[15]: Out[16]: Out[17]:"},{"location":"notebooks/data_analysis/#data-analysis","title":"Data Analysis\u00b6","text":""},{"location":"notebooks/data_analysis/#sudan","title":"Sudan\u00b6","text":""},{"location":"notebooks/data_analysis/#south-sudan","title":"South Sudan\u00b6","text":""},{"location":"notebooks/precision_recall/","title":"Precision-Recall","text":"<p>The goal of this notebook is to use the GHSL Surface and Population raster datasets as ground truths for identifying human habitation. These will be cross-referenced with nighttime light data from the Black Marble and SDGSat satellites. Predictions will be generated across different thresholds for both satellite products to assess their robustness and to identify potential optimal threshold values for habitation detection.</p> <p>The analysis starts with a rural case study in Nyala province, Sudan, and then moves on to investigate whether the results change in an urban setting like Winterthur, Switzerland. This approach helps to highlight differences in how nighttime light and built-up surface datasets perform across distinct geographic contexts.</p> In\u00a0[1]: Copied! <pre>import numpy as np\nimport holoviews as hv\nimport hvplot.xarray  # noqa\nimport hvplot.pandas  # noqa\nfrom rasterio.enums import Resampling\n\nfrom conflict_monitoring_ntl.case_studies import get_county_ids, get_date\nfrom conflict_monitoring_ntl.satellites import (\n    BlackMarble, \n    GHSLSurface, \n    SDGSat, \n    GHSLPopulation,\n)\nfrom conflict_monitoring_ntl.viz import plot_tile_comparison, plot_binary\nfrom conflict_monitoring_ntl.transform import RasterPipeline\nfrom conflict_monitoring_ntl.utils import (\n    get_gdf_for_admin, \n    get_combined_mask, \n    get_non_nan_flat_array,\n    binarize_xarray,\n    get_precision_recall\n)\n</pre> import numpy as np import holoviews as hv import hvplot.xarray  # noqa import hvplot.pandas  # noqa from rasterio.enums import Resampling  from conflict_monitoring_ntl.case_studies import get_county_ids, get_date from conflict_monitoring_ntl.satellites import (     BlackMarble,      GHSLSurface,      SDGSat,      GHSLPopulation, ) from conflict_monitoring_ntl.viz import plot_tile_comparison, plot_binary from conflict_monitoring_ntl.transform import RasterPipeline from conflict_monitoring_ntl.utils import (     get_gdf_for_admin,      get_combined_mask,      get_non_nan_flat_array,     binarize_xarray,     get_precision_recall ) In\u00a0[2]: Copied! <pre>country = \"Sudan\"\ndate, county_id = get_date(country), get_county_ids(country)[0]\ncounty_gdf = get_gdf_for_admin(county_id)\n</pre> country = \"Sudan\" date, county_id = get_date(country), get_county_ids(country)[0] county_gdf = get_gdf_for_admin(county_id) <p>The GHSL Surface dataset at 100m resolution encodes each pixel value as the total built-up surface in square meters within that 100m \u00d7 100m grid cell, where each cell represents a maximum of 10,000\u202fm\u00b2. The pixel value thus indicates how much of the cell\u2019s area is covered by built structures\u2014values range from 0 (no built-up surface) to 10,000 (fully built-up).\u200b</p> <p>This dataset is derived through the automated processing of Landsat and Sentinel imagery, with built-up surfaces detected using machine learning and image classification algorithms designed to identify manmade structures.</p> <p>sources: Google Eart Engine and Joint Research Centre Data Catalogue</p> In\u00a0[\u00a0]: hide_output Copied! <pre>rasters = [BlackMarble(), GHSLSurface()]\n\ntransformations = [{\"reproject_match\": {\"resampling\": Resampling.bilinear}}, {}]\npipeline = RasterPipeline(county_gdf, date, rasters, transformations)\nds = pipeline.run()\n</pre> rasters = [BlackMarble(), GHSLSurface()]  transformations = [{\"reproject_match\": {\"resampling\": Resampling.bilinear}}, {}] pipeline = RasterPipeline(county_gdf, date, rasters, transformations) ds = pipeline.run() In\u00a0[4]: Copied! <pre>list(ds.data_vars.keys())\n</pre> list(ds.data_vars.keys()) Out[4]: <pre>['black_marble_radiance', 'ghsl_surface']</pre> <p>The literature commonly adopts a 50% threshold to classify a GHSL built-up surface pixel as built-up, primarily in urban contexts (source). However, this threshold is often unsuitable for rural areas, as illustrated by the chart below. Therefore, for the GHSL Surface dataset at 100m resolution, I use a threshold of 0, meaning that any detectable built-up area within a pixel classifies it as \"True.\" This approach better captures dispersed and low-density settlements typical of rural environments.</p> In\u00a0[5]: Copied! <pre>thresholds = np.arange(0, 5001, 500)\nbinary_dict = {t: plot_binary(ds.ghsl_surface, \"GHSL Surface\", t) for t in thresholds}\nhv.HoloMap(binary_dict, kdims='threshold')\n</pre> thresholds = np.arange(0, 5001, 500) binary_dict = {t: plot_binary(ds.ghsl_surface, \"GHSL Surface\", t) for t in thresholds} hv.HoloMap(binary_dict, kdims='threshold') Out[5]: In\u00a0[6]: Copied! <pre>plot_tile_comparison(\n    arr_left=ds.ghsl_surface,\n    arr_right=ds.black_marble_radiance,\n    title_left=\"GHSL Surface\",\n    title_right=\"Black Marble radiance (nW/cm\u00b2/sr)\",\n    clim_left=(0, 50),\n    clim_right=(0, 2)\n)\n</pre> plot_tile_comparison(     arr_left=ds.ghsl_surface,     arr_right=ds.black_marble_radiance,     title_left=\"GHSL Surface\",     title_right=\"Black Marble radiance (nW/cm\u00b2/sr)\",     clim_left=(0, 50),     clim_right=(0, 2) ) Out[6]: In\u00a0[7]: Copied! <pre>mask = get_combined_mask(ds)\nds = ds.where(mask)\n</pre> mask = get_combined_mask(ds) ds = ds.where(mask) In\u00a0[\u00a0]: hide_output Copied! <pre>ghsl_pop_binary = binarize_xarray(ds.ghsl_surface, 0)\ny_true = get_non_nan_flat_array(ghsl_pop_binary)\n\nbm_thresholds = np.arange(0.1, 2.01, 0.01).tolist()\ndf = get_precision_recall(ds.black_marble_radiance, y_true, bm_thresholds)\n</pre> ghsl_pop_binary = binarize_xarray(ds.ghsl_surface, 0) y_true = get_non_nan_flat_array(ghsl_pop_binary)  bm_thresholds = np.arange(0.1, 2.01, 0.01).tolist() df = get_precision_recall(ds.black_marble_radiance, y_true, bm_thresholds) In\u00a0[9]: Copied! <pre>df.head(5)\n</pre> df.head(5) Out[9]: precision recall threshold 0 0.018686 0.973177 0.10 1 0.018668 0.968081 0.11 2 0.018662 0.963271 0.12 3 0.018663 0.958094 0.13 4 0.018665 0.951898 0.14 In\u00a0[10]: Copied! <pre>df.hvplot.scatter(\n    x=\"recall\", \n    y=\"precision\", \n    c=\"threshold\", \n    height=400, \n    width=500, \n    clabel=\"threshold\", \n    cmap=\"cividis\"\n)\n</pre> df.hvplot.scatter(     x=\"recall\",      y=\"precision\",      c=\"threshold\",      height=400,      width=500,      clabel=\"threshold\",      cmap=\"cividis\" ) Out[10]: <p>As shown by the precision-recall curve above, Black Marble nighttime lights provide almost no predictive power for detecting built-up surfaces in rural areas. This likely occurs because low-density settlements, sparse infrastructure, and limited artificial lighting in rural environments often fall below the sensor\u2019s detection threshold, resulting in weak or absent nighttime light signals\u2014even when built-up structures are present. Additionally, rural areas may exhibit lights too faint or intermittent to be reliably captured and distinguished from natural background noise.</p> In\u00a0[11]: Copied! <pre>plot_tile_comparison(\n    arr_left=binarize_xarray(ds.ghsl_surface, 0),\n    arr_right=binarize_xarray(ds.black_marble_radiance, 1.0),\n    title_left=\"GHSL Surface\",\n    title_right=\"Black Marble binary (threshold 1.0)\",\n    colorbar=False\n)\n</pre> plot_tile_comparison(     arr_left=binarize_xarray(ds.ghsl_surface, 0),     arr_right=binarize_xarray(ds.black_marble_radiance, 1.0),     title_left=\"GHSL Surface\",     title_right=\"Black Marble binary (threshold 1.0)\",     colorbar=False ) Out[11]: <p>Interestingly, the binary classifications derived from GHSL Surface and Black Marble nighttime lights do not align, as also reflected in the radiance plot above. This discrepancy suggests that the ground truth may be less definitive than assumed, since the GHSL Surface data represents deduced built-up areas rather than directly measured artificial illumination.</p> <p>The GHSL Population dataset at 100m resolution encodes each pixel value as the estimated number of people residing within that 100m \u00d7 100m grid cell.</p> <p>Population estimates are derived by spatially disaggregating census and administrative data. Locations and densities of residential population are inferred based on both the extent and intensity of built-up land identified in satellite imagery, with adjustments made through machine learning and modeling to match known administrative totals.</p> <p>sources: Joint Research Centre Data Catalogue</p> In\u00a0[\u00a0]: hide_output Copied! <pre>rasters = [BlackMarble(), GHSLPopulation()]\n\ntransformations = [{\"reproject_match\": {\"resampling\": Resampling.bilinear}}, {}]\npipeline = RasterPipeline(county_gdf, date, rasters, transformations)\nds = pipeline.run()\n</pre> rasters = [BlackMarble(), GHSLPopulation()]  transformations = [{\"reproject_match\": {\"resampling\": Resampling.bilinear}}, {}] pipeline = RasterPipeline(county_gdf, date, rasters, transformations) ds = pipeline.run() <p>Because a percentage threshold is not applicable for population rasters, a simple threshold of zero will be used. In this context, any pixel with a population value greater than zero is classified as \"True.\" The chart below demonstrates the binary classification outcomes across varying threshold values.</p> In\u00a0[13]: Copied! <pre>thresholds = np.arange(0, 501, 100)\nbinary_dict = {t: plot_binary(ds.ghsl_population, \"GHSL Population\", t) for t in thresholds}\nhv.HoloMap(binary_dict, kdims='threshold')\n</pre> thresholds = np.arange(0, 501, 100) binary_dict = {t: plot_binary(ds.ghsl_population, \"GHSL Population\", t) for t in thresholds} hv.HoloMap(binary_dict, kdims='threshold') Out[13]: In\u00a0[14]: Copied! <pre>mask = get_combined_mask(ds)\nds = ds.where(mask)\n</pre> mask = get_combined_mask(ds) ds = ds.where(mask) In\u00a0[15]: Copied! <pre>plot_tile_comparison(\n    arr_left=ds.ghsl_population,\n    arr_right=ds.black_marble_radiance,\n    title_left=\"GHSL Population\",\n    title_right=\"Black Marble radiance (nW/cm\u00b2/sr)\",\n    clim_left=(0, 50),\n    clim_right=(0, 2)\n)\n</pre> plot_tile_comparison(     arr_left=ds.ghsl_population,     arr_right=ds.black_marble_radiance,     title_left=\"GHSL Population\",     title_right=\"Black Marble radiance (nW/cm\u00b2/sr)\",     clim_left=(0, 50),     clim_right=(0, 2) ) Out[15]: <p>A similar pattern emerges with the GHSL Population dataset, where areas of population clustering frequently do not overlap with regions displaying detectable nighttime lights.</p> In\u00a0[\u00a0]: hide_output Copied! <pre>ghsl_pop_binary = binarize_xarray(ds.ghsl_population, 0)\ny_true = get_non_nan_flat_array(ghsl_pop_binary)\n\nbm_thresholds = np.arange(0.1, 2.01, 0.01).tolist()\ndf = get_precision_recall(ds.black_marble_radiance, y_true, bm_thresholds)\n</pre> ghsl_pop_binary = binarize_xarray(ds.ghsl_population, 0) y_true = get_non_nan_flat_array(ghsl_pop_binary)  bm_thresholds = np.arange(0.1, 2.01, 0.01).tolist() df = get_precision_recall(ds.black_marble_radiance, y_true, bm_thresholds) In\u00a0[17]: Copied! <pre>df.hvplot.scatter(\n    x=\"recall\", \n    y=\"precision\", \n    c=\"threshold\", \n    height=400,\n    width=500, \n    clabel=\"threshold\", \n    cmap=\"cividis\"\n)\n</pre> df.hvplot.scatter(     x=\"recall\",      y=\"precision\",      c=\"threshold\",      height=400,     width=500,      clabel=\"threshold\",      cmap=\"cividis\" ) Out[17]: <p>Given the evident mismatch between population clusters identified by GHSL Population and areas illuminated in nighttime light imagery, the predictive power of nighttime lights for detecting population is similarly negligible\u2014just as observed with built-up surface data.</p> <p>The same analysis is now applied to SDGSat-1 nighttime light data. Since there was no difference in results between the population and surface datasets with Black Marble, the following assessment will focus solely on the surface dataset.</p> In\u00a0[\u00a0]: hide_output Copied! <pre>rasters = [SDGSat(), GHSLSurface()]\n\ntransformations = [{\"reproject_match\": {\"resampling\": Resampling.bilinear}}, {}]\npipeline = RasterPipeline(county_gdf, date, rasters, transformations)\nds = pipeline.run()\n</pre> rasters = [SDGSat(), GHSLSurface()]  transformations = [{\"reproject_match\": {\"resampling\": Resampling.bilinear}}, {}] pipeline = RasterPipeline(county_gdf, date, rasters, transformations) ds = pipeline.run() In\u00a0[19]: Copied! <pre>plot_tile_comparison(\n    arr_left=ds.ghsl_surface,\n    arr_right=ds.sdgsat_dn,\n    title_left=\"GHSL Surface\",\n    title_right=\"SDGSat DN\",\n    clim_left=(0, 50),\n    clim_right=(1, 10)\n)\n</pre> plot_tile_comparison(     arr_left=ds.ghsl_surface,     arr_right=ds.sdgsat_dn,     title_left=\"GHSL Surface\",     title_right=\"SDGSat DN\",     clim_left=(0, 50),     clim_right=(1, 10) ) Out[19]: In\u00a0[20]: Copied! <pre>mask = get_combined_mask(ds)\nds = ds.where(mask)\n</pre> mask = get_combined_mask(ds) ds = ds.where(mask) In\u00a0[\u00a0]: hide_output Copied! <pre>ghsl_pop_binary = binarize_xarray(ds.ghsl_surface, 0)\ny_true = get_non_nan_flat_array(ghsl_pop_binary)\n\nsdgsat_thresholds = np.arange(1.01, 2.01, 0.01).tolist()\ndf = get_precision_recall(ds.sdgsat_dn, y_true, sdgsat_thresholds)\n</pre> ghsl_pop_binary = binarize_xarray(ds.ghsl_surface, 0) y_true = get_non_nan_flat_array(ghsl_pop_binary)  sdgsat_thresholds = np.arange(1.01, 2.01, 0.01).tolist() df = get_precision_recall(ds.sdgsat_dn, y_true, sdgsat_thresholds) In\u00a0[22]: Copied! <pre>df.hvplot.scatter(\n    x=\"recall\", \n    y=\"precision\", \n    c=\"threshold\", \n    height=400, \n    width=500, \n    clabel=\"threshold\", \n    cmap=\"cividis\"\n)\n</pre> df.hvplot.scatter(     x=\"recall\",      y=\"precision\",      c=\"threshold\",      height=400,      width=500,      clabel=\"threshold\",      cmap=\"cividis\" ) Out[22]: <p>The results with SDGSat-1 are similar to those found with Black Marble: precision remains below 10 percent, and pixels identified as lighted by SDGSat do not overlap with built-up surface pixels.</p> <p>I will apply the same analysis in Winterthur, an urban area near Zurich, Switzerland.</p> In\u00a0[23]: Copied! <pre>import datetime\nimport pygadm\n\n\ndate = datetime.date(2022, 3, 22)\ncounty_gdf = pygadm.Items(name=\"Winterthur\", content_level=2)\ncounty_gdf = county_gdf.set_crs(\"EPSG:4326\")\n</pre> import datetime import pygadm   date = datetime.date(2022, 3, 22) county_gdf = pygadm.Items(name=\"Winterthur\", content_level=2) county_gdf = county_gdf.set_crs(\"EPSG:4326\") In\u00a0[\u00a0]: hide_output Copied! <pre>rasters = [BlackMarble(), GHSLSurface()]\n\ntransformations = [{\"reproject_match\": {\"resampling\": Resampling.bilinear}}, {}]\npipeline = RasterPipeline(county_gdf, date, rasters, transformations)\nds = pipeline.run()\n</pre> rasters = [BlackMarble(), GHSLSurface()]  transformations = [{\"reproject_match\": {\"resampling\": Resampling.bilinear}}, {}] pipeline = RasterPipeline(county_gdf, date, rasters, transformations) ds = pipeline.run() In\u00a0[25]: Copied! <pre>plot_tile_comparison(\n    arr_left=ds.ghsl_surface,\n    arr_right=ds.black_marble_radiance,\n    title_left=\"GHSL Surface\",\n    title_right=\"Black Marble radiance (nW/cm\u00b2/sr)\",\n    clim_left=(0, 5000),\n    clim_right=(0, 20)\n)\n</pre> plot_tile_comparison(     arr_left=ds.ghsl_surface,     arr_right=ds.black_marble_radiance,     title_left=\"GHSL Surface\",     title_right=\"Black Marble radiance (nW/cm\u00b2/sr)\",     clim_left=(0, 5000),     clim_right=(0, 20) ) Out[25]: In\u00a0[26]: Copied! <pre>mask = get_combined_mask(ds)\nds = ds.where(mask)\n</pre> mask = get_combined_mask(ds) ds = ds.where(mask) In\u00a0[\u00a0]: hide_output Copied! <pre>ghsl_pop_binary = binarize_xarray(ds.ghsl_surface, 0)\ny_true = get_non_nan_flat_array(ghsl_pop_binary)\n\nbm_thresholds = np.arange(0.1, 2.01, 0.01).tolist()\ndf = get_precision_recall(ds.black_marble_radiance, y_true, bm_thresholds)\n</pre> ghsl_pop_binary = binarize_xarray(ds.ghsl_surface, 0) y_true = get_non_nan_flat_array(ghsl_pop_binary)  bm_thresholds = np.arange(0.1, 2.01, 0.01).tolist() df = get_precision_recall(ds.black_marble_radiance, y_true, bm_thresholds) In\u00a0[28]: Copied! <pre>df.hvplot.scatter(\n    x=\"recall\", \n    y=\"precision\", \n    c=\"threshold\", \n    height=400, \n    width=500, \n    clabel=\"threshold\", \n    cmap=\"cividis\"\n)\n</pre> df.hvplot.scatter(     x=\"recall\",      y=\"precision\",      c=\"threshold\",      height=400,      width=500,      clabel=\"threshold\",      cmap=\"cividis\" ) Out[28]: In\u00a0[29]: Copied! <pre>plot_tile_comparison(\n    arr_left=binarize_xarray(ds.ghsl_surface, 0),\n    arr_right=binarize_xarray(ds.black_marble_radiance, 1.0),\n    title_left=\"GHSL Surface\",\n    title_right=\"Black Marble binary (threshold 1.0)\",\n    colorbar=False\n)\n</pre> plot_tile_comparison(     arr_left=binarize_xarray(ds.ghsl_surface, 0),     arr_right=binarize_xarray(ds.black_marble_radiance, 1.0),     title_left=\"GHSL Surface\",     title_right=\"Black Marble binary (threshold 1.0)\",     colorbar=False ) Out[29]: In\u00a0[\u00a0]: hide_output Copied! <pre>rasters = [SDGSat(), GHSLSurface()]\n\ntransformations = [{\"reproject_match\": {\"resampling\": Resampling.bilinear}}, {}]\npipeline = RasterPipeline(county_gdf, date, rasters, transformations)\nds = pipeline.run()\n</pre> rasters = [SDGSat(), GHSLSurface()]  transformations = [{\"reproject_match\": {\"resampling\": Resampling.bilinear}}, {}] pipeline = RasterPipeline(county_gdf, date, rasters, transformations) ds = pipeline.run() In\u00a0[31]: Copied! <pre>plot_tile_comparison(\n    arr_left=ds.ghsl_surface,\n    arr_right=ds.sdgsat_dn,\n    title_left=\"GHSL Surface\",\n    title_right=\"SDGSat DN\",\n    clim_left=(0, 5000),\n    clim_right=(0, 20)\n)\n</pre> plot_tile_comparison(     arr_left=ds.ghsl_surface,     arr_right=ds.sdgsat_dn,     title_left=\"GHSL Surface\",     title_right=\"SDGSat DN\",     clim_left=(0, 5000),     clim_right=(0, 20) ) Out[31]: In\u00a0[32]: Copied! <pre>mask = get_combined_mask(ds)\nds = ds.where(mask)\n</pre> mask = get_combined_mask(ds) ds = ds.where(mask) In\u00a0[\u00a0]: hide_output Copied! <pre>ghsl_pop_binary = binarize_xarray(ds.ghsl_surface, 0)\ny_true = get_non_nan_flat_array(ghsl_pop_binary)\n\nsdgsat_thresholds = np.arange(1.01, 2.01, 0.01).tolist()\ndf = get_precision_recall(ds.sdgsat_dn, y_true, sdgsat_thresholds)\n</pre> ghsl_pop_binary = binarize_xarray(ds.ghsl_surface, 0) y_true = get_non_nan_flat_array(ghsl_pop_binary)  sdgsat_thresholds = np.arange(1.01, 2.01, 0.01).tolist() df = get_precision_recall(ds.sdgsat_dn, y_true, sdgsat_thresholds) In\u00a0[34]: Copied! <pre>df.hvplot.scatter(\n    x=\"recall\", \n    y=\"precision\", \n    c=\"threshold\", \n    height=400, \n    width=500, \n    clabel=\"threshold\", \n    cmap=\"cividis\"\n)\n</pre> df.hvplot.scatter(     x=\"recall\",      y=\"precision\",      c=\"threshold\",      height=400,      width=500,      clabel=\"threshold\",      cmap=\"cividis\" ) Out[34]: In\u00a0[35]: Copied! <pre>plot_tile_comparison(\n    arr_left=binarize_xarray(ds.ghsl_surface, 0),\n    arr_right=binarize_xarray(ds.sdgsat_dn, 1.5),\n    title_left=\"GHSL Surface\",\n    title_right=\"SDGSat binary (threshold 1.5)\",\n    colorbar=False\n)\n</pre> plot_tile_comparison(     arr_left=binarize_xarray(ds.ghsl_surface, 0),     arr_right=binarize_xarray(ds.sdgsat_dn, 1.5),     title_left=\"GHSL Surface\",     title_right=\"SDGSat binary (threshold 1.5)\",     colorbar=False ) Out[35]: <p>For both Black Marble and SDGSat-1, the results in Winterthur are significantly better than in rural Sudan. This indicates that in dense urban environments, nighttime light detections from both satellites have much higher overlap with built-up areas, making them more reliable proxies for urban habitation and infrastructure.</p> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"notebooks/precision_recall/#nyala-sudan","title":"Nyala - Sudan\u00b6","text":""},{"location":"notebooks/precision_recall/#black-marble","title":"Black Marble\u00b6","text":""},{"location":"notebooks/precision_recall/#ghsl-surface","title":"GHSL Surface\u00b6","text":""},{"location":"notebooks/precision_recall/#ghsl-population","title":"GHSL Population\u00b6","text":""},{"location":"notebooks/precision_recall/#sdgsat","title":"SDGSat\u00b6","text":""},{"location":"notebooks/precision_recall/#ghsl-surface","title":"GHSL Surface\u00b6","text":""},{"location":"notebooks/precision_recall/#winterthur-switzerland","title":"Winterthur - Switzerland\u00b6","text":""},{"location":"notebooks/precision_recall/#black-marble","title":"Black Marble\u00b6","text":""},{"location":"notebooks/precision_recall/#sdgsat","title":"SDGSat\u00b6","text":""},{"location":"notebooks/site_selection/","title":"Site Selection","text":"In\u00a0[1]: Copied! <pre>from conflict_monitoring_ntl.viz import plot_map_with_shape\nfrom conflict_monitoring_ntl.case_studies import (\n    CaseStudiesRural, \n    CaseStudiesPeriUrban,\n    CaseStudiesUrban\n)\n</pre> from conflict_monitoring_ntl.viz import plot_map_with_shape from conflict_monitoring_ntl.case_studies import (     CaseStudiesRural,      CaseStudiesPeriUrban,     CaseStudiesUrban ) In\u00a0[2]: Copied! <pre>nyala = CaseStudiesRural.NYALA\nprint(nyala)\n</pre> nyala = CaseStudiesRural.NYALA print(nyala)  <pre>Case Study: Nyala (rural)\n  Country     : Sudan\n  City        : Nyala\n  Date        : 2023-12-12\n</pre> In\u00a0[5]: Copied! <pre>plot_map_with_shape(nyala.gdf, zoom_start=11)\n</pre> plot_map_with_shape(nyala.gdf, zoom_start=11) Out[5]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook In\u00a0[7]: Copied! <pre>bentiu = CaseStudiesRural.BENTIU\nprint(bentiu)\n</pre> bentiu = CaseStudiesRural.BENTIU print(bentiu) <pre>Case Study: Bentiu (rural)\n  Country     : South Sudan\n  City        : Bentiu\n  Date        : 2024-12-24\n</pre> In\u00a0[8]: Copied! <pre>plot_map_with_shape(bentiu.gdf, zoom_start=13)\n</pre> plot_map_with_shape(bentiu.gdf, zoom_start=13) Out[8]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook In\u00a0[9]: Copied! <pre>maiduguri = CaseStudiesRural.MAIDUGURI\nprint(maiduguri)\n</pre> maiduguri = CaseStudiesRural.MAIDUGURI print(maiduguri) <pre>Case Study: Maiduguri (rural)\n  Country     : Nigeria\n  City        : Maiduguri\n  Date        : 2024-05-28\n</pre> In\u00a0[11]: Copied! <pre>plot_map_with_shape(maiduguri.gdf, zoom_start=12)\n</pre> plot_map_with_shape(maiduguri.gdf, zoom_start=12) Out[11]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook In\u00a0[12]: Copied! <pre>sittwe = CaseStudiesRural.SITTWE\nprint(sittwe)\n</pre> sittwe = CaseStudiesRural.SITTWE print(sittwe) <pre>Case Study: Sittwe (rural)\n  Country     : Myanmar\n  City        : Sittwe\n  Date        : 2024-01-03\n</pre> In\u00a0[14]: Copied! <pre>plot_map_with_shape(sittwe.gdf, zoom_start=13)\n</pre> plot_map_with_shape(sittwe.gdf, zoom_start=13) Out[14]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook In\u00a0[15]: Copied! <pre>mekele = CaseStudiesRural.MEKELE\nprint(mekele)\n</pre> mekele = CaseStudiesRural.MEKELE print(mekele) <pre>Case Study: Mekele (rural)\n  Country     : Ethiopia\n  City        : Mekele\n  Date        : 2024-03-28\n</pre> In\u00a0[17]: Copied! <pre>plot_map_with_shape(mekele.gdf, zoom_start=12)\n</pre> plot_map_with_shape(mekele.gdf, zoom_start=12) Out[17]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook In\u00a0[18]: Copied! <pre>al_hudaydah = CaseStudiesRural.AL_HUDAYDAH\nprint(al_hudaydah)\n</pre> al_hudaydah = CaseStudiesRural.AL_HUDAYDAH print(al_hudaydah) <pre>Case Study: Al-Hudaydah (rural)\n  Country     : Yemen\n  City        : Al-Hudaydah\n  Date        : 2024-12-22\n</pre> In\u00a0[19]: Copied! <pre>plot_map_with_shape(al_hudaydah.gdf, zoom_start=12)\n</pre> plot_map_with_shape(al_hudaydah.gdf, zoom_start=12) Out[19]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook In\u00a0[20]: Copied! <pre>kaga_bandoro = CaseStudiesRural.KAGA_BANDORO\nprint(kaga_bandoro)\n</pre> kaga_bandoro = CaseStudiesRural.KAGA_BANDORO print(kaga_bandoro) <pre>Case Study: Kaga-Bandoro (rural)\n  Country     : Central African Republic\n  City        : Kaga-Bandoro\n  Date        : 2023-02-17\n</pre> In\u00a0[23]: Copied! <pre>plot_map_with_shape(kaga_bandoro.gdf, zoom_start=14)\n</pre> plot_map_with_shape(kaga_bandoro.gdf, zoom_start=14) Out[23]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook In\u00a0[24]: Copied! <pre>mopti = CaseStudiesRural.MOPTI\nprint(mopti)\n</pre> mopti = CaseStudiesRural.MOPTI print(mopti) <pre>Case Study: Mopti (rural)\n  Country     : Mali\n  City        : Mopti\n  Date        : 2024-01-30\n</pre> In\u00a0[26]: Copied! <pre>plot_map_with_shape(mopti.gdf, zoom_start=14)\n</pre> plot_map_with_shape(mopti.gdf, zoom_start=14) Out[26]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook In\u00a0[13]: Copied! <pre>deir_ez_zor = CaseStudiesRural.DEIR_EZ_ZOR\nprint(deir_ez_zor)\n</pre> deir_ez_zor = CaseStudiesRural.DEIR_EZ_ZOR print(deir_ez_zor) <pre>Case Study: Deir ez-Zor (rural)\n  Country     : Syria\n  City        : Deir ez-Zor\n  Date        : 2024-12-28\n</pre> In\u00a0[14]: Copied! <pre>plot_map_with_shape(deir_ez_zor.gdf, zoom_start=13)\n</pre> plot_map_with_shape(deir_ez_zor.gdf, zoom_start=13) Out[14]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook In\u00a0[15]: Copied! <pre>katana = CaseStudiesRural.KATANA\nprint(katana)\n</pre> katana = CaseStudiesRural.KATANA print(katana) <pre>Case Study: KATANA (rural)\n  Country     : Democratic Republic of the Congo\n  City        : KATANA\n  Date        : 2024-05-28\n</pre> In\u00a0[17]: Copied! <pre>plot_map_with_shape(katana.gdf, zoom_start=14)\n</pre> plot_map_with_shape(katana.gdf, zoom_start=14) Out[17]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook In\u00a0[2]: Copied! <pre>oudja = CaseStudiesPeriUrban.OUJDA\nprint(oudja)\n</pre> oudja = CaseStudiesPeriUrban.OUJDA print(oudja) <pre>Case Study: Oujda (peri-urban)\n  Country     : Morocco\n  City        : Oujda\n  Date        : 2022-05-05\n</pre> In\u00a0[4]: Copied! <pre>plot_map_with_shape(oudja.gdf, zoom_start=12)\n</pre> plot_map_with_shape(oudja.gdf, zoom_start=12) Out[4]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook In\u00a0[5]: Copied! <pre>raipur = CaseStudiesPeriUrban.RAIPUR\nprint(raipur)\n</pre> raipur = CaseStudiesPeriUrban.RAIPUR print(raipur) <pre>Case Study: Raipur (peri-urban)\n  Country     : India\n  City        : Raipur\n  Date        : 2022-04-01\n</pre> In\u00a0[7]: Copied! <pre>plot_map_with_shape(raipur.gdf, zoom_start=12)\n</pre> plot_map_with_shape(raipur.gdf, zoom_start=12) Out[7]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook In\u00a0[8]: Copied! <pre>rangpur = CaseStudiesPeriUrban.RANGPUR\nprint(rangpur)\n</pre> rangpur = CaseStudiesPeriUrban.RANGPUR print(rangpur) <pre>Case Study: Rangpur (peri-urban)\n  Country     : Bangladesh\n  City        : Rangpur\n  Date        : 2022-03-07\n</pre> In\u00a0[9]: Copied! <pre>plot_map_with_shape(rangpur.gdf, zoom_start=13)\n</pre> plot_map_with_shape(rangpur.gdf, zoom_start=13) Out[9]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook In\u00a0[2]: Copied! <pre>kuranegala = CaseStudiesPeriUrban.KURANEGALA\nprint(kuranegala)\n</pre> kuranegala = CaseStudiesPeriUrban.KURANEGALA print(kuranegala) <pre>Case Study: Kuranegala (peri-urban)\n  Country     : Sri Lanka\n  City        : Kuranegala\n  Date        : 2024-02-07\n</pre> In\u00a0[3]: Copied! <pre>plot_map_with_shape(kuranegala.gdf, zoom_start=13)\n</pre> plot_map_with_shape(kuranegala.gdf, zoom_start=13) Out[3]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook In\u00a0[4]: Copied! <pre>can_tho = CaseStudiesPeriUrban.CAN_THO\nprint(can_tho)\n</pre> can_tho = CaseStudiesPeriUrban.CAN_THO print(can_tho) <pre>Case Study: Can Tho (peri-urban)\n  Country     : Vietnam\n  City        : Can Tho\n  Date        : 2024-02-02\n</pre> In\u00a0[5]: Copied! <pre>plot_map_with_shape(can_tho.gdf, zoom_start=13)\n</pre> plot_map_with_shape(can_tho.gdf, zoom_start=13) Out[5]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook In\u00a0[6]: Copied! <pre>legazpi = CaseStudiesPeriUrban.LEGAZPI\nprint(legazpi)\n</pre> legazpi = CaseStudiesPeriUrban.LEGAZPI print(legazpi) <pre>Case Study: Legazpi, Albay (peri-urban)\n  Country     : Philippines\n  City        : Legazpi, Albay\n  Date        : 2022-11-24\n</pre> In\u00a0[7]: Copied! <pre>plot_map_with_shape(legazpi.gdf, zoom_start=13)\n</pre> plot_map_with_shape(legazpi.gdf, zoom_start=13) Out[7]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook In\u00a0[8]: Copied! <pre>qarshi = CaseStudiesPeriUrban.QARSHI\nprint(qarshi)\n</pre> qarshi = CaseStudiesPeriUrban.QARSHI print(qarshi) <pre>Case Study: Qarshi (peri-urban)\n  Country     : Uzbekistan\n  City        : Qarshi\n  Date        : 2024-03-14\n</pre> In\u00a0[10]: Copied! <pre>plot_map_with_shape(qarshi.gdf, zoom_start=12)\n</pre> plot_map_with_shape(qarshi.gdf, zoom_start=12) Out[10]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook In\u00a0[11]: Copied! <pre>kumasi = CaseStudiesPeriUrban.KUMASI\nprint(kumasi)\n</pre> kumasi = CaseStudiesPeriUrban.KUMASI print(kumasi) <pre>Case Study: Kumasi (peri-urban)\n  Country     : Ghana\n  City        : Kumasi\n  Date        : 2024-11-30\n</pre> In\u00a0[14]: Copied! <pre>plot_map_with_shape(kumasi.gdf, zoom_start=11)\n</pre> plot_map_with_shape(kumasi.gdf, zoom_start=11) Out[14]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook In\u00a0[6]: Copied! <pre>villavicencio = CaseStudiesPeriUrban.VILLAVICENCIO\nprint(villavicencio)\n</pre> villavicencio = CaseStudiesPeriUrban.VILLAVICENCIO print(villavicencio) <pre>Case Study: Villavicencio (peri-urban)\n  Country     : Colombia\n  City        : Villavicencio\n  Date        : 2022-12-28\n</pre> In\u00a0[8]: Copied! <pre>plot_map_with_shape(villavicencio.gdf, zoom_start=13)\n</pre> plot_map_with_shape(villavicencio.gdf, zoom_start=13) Out[8]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook In\u00a0[9]: Copied! <pre>nakuru = CaseStudiesPeriUrban.NAKURU\nprint(nakuru)\n</pre> nakuru = CaseStudiesPeriUrban.NAKURU print(nakuru) <pre>Case Study: Nakuru (peri-urban)\n  Country     : Kenya\n  City        : Nakuru\n  Date        : 2022-02-27\n</pre> In\u00a0[11]: Copied! <pre>plot_map_with_shape(nakuru.gdf, zoom_start=13)\n</pre> plot_map_with_shape(nakuru.gdf, zoom_start=13) Out[11]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook In\u00a0[16]: Copied! <pre>lagos = CaseStudiesUrban.LAGOS\nprint(lagos)\n</pre> lagos = CaseStudiesUrban.LAGOS print(lagos) <pre>Case Study: Lagos (urban)\n  Country     : Nigeria\n  City        : Lagos\n  Date        : 2024-12-23\n</pre> In\u00a0[17]: Copied! <pre>plot_map_with_shape(lagos.gdf, zoom_start=11)\n</pre> plot_map_with_shape(lagos.gdf, zoom_start=11) Out[17]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook In\u00a0[2]: Copied! <pre>new_delhi = CaseStudiesUrban.NEW_DELHI\nprint(new_delhi)\n</pre> new_delhi = CaseStudiesUrban.NEW_DELHI print(new_delhi) <pre>Case Study: New Delhi (urban)\n  Country     : India\n  City        : New Delhi\n  Date        : 2022-02-27\n</pre> In\u00a0[3]: Copied! <pre>plot_map_with_shape(new_delhi.gdf, zoom_start=11)\n</pre> plot_map_with_shape(new_delhi.gdf, zoom_start=11) Out[3]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook In\u00a0[2]: Copied! <pre>shanghai = CaseStudiesUrban.SHANGHAI\nprint(shanghai)\n</pre> shanghai = CaseStudiesUrban.SHANGHAI print(shanghai) <pre>Case Study: Shanghai (urban)\n  Country     : China\n  City        : Shanghai\n  Date        : 2021-11-10\n</pre> In\u00a0[6]: Copied! <pre>plot_map_with_shape(shanghai.gdf, zoom_start=9)\n</pre> plot_map_with_shape(shanghai.gdf, zoom_start=9) Out[6]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook In\u00a0[4]: Copied! <pre>cairo = CaseStudiesUrban.CAIRO\nprint(cairo)\n</pre> cairo = CaseStudiesUrban.CAIRO print(cairo) <pre>Case Study: Cairo (urban)\n  Country     : Egypt\n  City        : Cairo\n  Date        : 2022-02-06\n</pre> In\u00a0[5]: Copied! <pre>plot_map_with_shape(cairo.gdf, zoom_start=11)\n</pre> plot_map_with_shape(cairo.gdf, zoom_start=11) Out[5]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook In\u00a0[7]: Copied! <pre>zurich = CaseStudiesUrban.ZURICH\nprint(zurich)\n</pre> zurich = CaseStudiesUrban.ZURICH print(zurich) <pre>Case Study: Zurich (urban)\n  Country     : Switzerland\n  City        : Zurich\n  Date        : 2022-03-22\n</pre> In\u00a0[10]: Copied! <pre>plot_map_with_shape(zurich.gdf, zoom_start=13)\n</pre> plot_map_with_shape(zurich.gdf, zoom_start=13) Out[10]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook In\u00a0[11]: Copied! <pre>mexico_city = CaseStudiesUrban.MEXICO_CITY\nprint(mexico_city)\n</pre> mexico_city = CaseStudiesUrban.MEXICO_CITY print(mexico_city) <pre>Case Study: Mexico City (urban)\n  Country     : Mexico\n  City        : Mexico City\n  Date        : 2022-05-16\n</pre> In\u00a0[12]: Copied! <pre>plot_map_with_shape(mexico_city.gdf, zoom_start=11)\n</pre> plot_map_with_shape(mexico_city.gdf, zoom_start=11) Out[12]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook In\u00a0[14]: Copied! <pre>tokyo = CaseStudiesUrban.TOKYO\nprint(tokyo)\n</pre> tokyo = CaseStudiesUrban.TOKYO print(tokyo) <pre>Case Study: Tokyo (urban)\n  Country     : Japan\n  City        : Tokyo\n  Date        : 2022-01-08\n</pre> In\u00a0[16]: Copied! <pre>plot_map_with_shape(tokyo.gdf, zoom_start=10)\n</pre> plot_map_with_shape(tokyo.gdf, zoom_start=10) Out[16]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook In\u00a0[17]: Copied! <pre>karachi = CaseStudiesUrban.KARACHI\nprint(karachi)\n</pre> karachi = CaseStudiesUrban.KARACHI print(karachi) <pre>Case Study: Karachi (urban)\n  Country     : Pakistan\n  City        : Karachi\n  Date        : 2023-12-17\n</pre> In\u00a0[20]: Copied! <pre>plot_map_with_shape(karachi.gdf, zoom_start=9)\n</pre> plot_map_with_shape(karachi.gdf, zoom_start=9) Out[20]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook In\u00a0[21]: Copied! <pre>los_angeles = CaseStudiesUrban.LOS_ANGELES\nprint(los_angeles)\n</pre> los_angeles = CaseStudiesUrban.LOS_ANGELES print(los_angeles) <pre>Case Study: Los Angeles (urban)\n  Country     : USA\n  City        : Los Angeles\n  Date        : 2022-11-30\n</pre> In\u00a0[23]: Copied! <pre>plot_map_with_shape(los_angeles.gdf, zoom_start=10)\n</pre> plot_map_with_shape(los_angeles.gdf, zoom_start=10) Out[23]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook In\u00a0[2]: Copied! <pre>pretoria = CaseStudiesUrban.PRETORIA\nprint(pretoria)\n</pre> pretoria = CaseStudiesUrban.PRETORIA print(pretoria) <pre>Case Study: Pretoria (urban)\n  Country     : South Africa\n  City        : Pretoria\n  Date        : 2022-03-18\n</pre> In\u00a0[5]: Copied! <pre>plot_map_with_shape(pretoria.gdf, zoom_start=11)\n</pre> plot_map_with_shape(pretoria.gdf, zoom_start=11) Out[5]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"notebooks/site_selection/#site-selection","title":"Site Selection\u00b6","text":""},{"location":"notebooks/site_selection/#rural","title":"Rural\u00b6","text":""},{"location":"notebooks/site_selection/#sudan-nyala","title":"Sudan - Nyala\u00b6","text":""},{"location":"notebooks/site_selection/#south-sudan-bentiu","title":"South Sudan - Bentiu\u00b6","text":""},{"location":"notebooks/site_selection/#nigeria-maiduguri","title":"Nigeria - Maiduguri\u00b6","text":""},{"location":"notebooks/site_selection/#myanmar-sittwe-area","title":"Myanmar - Sittwe area\u00b6","text":""},{"location":"notebooks/site_selection/#ethiopia-mekele","title":"Ethiopia - Mekele\u00b6","text":""},{"location":"notebooks/site_selection/#yemen-al-hudaydah","title":"Yemen - Al Hudaydah\u00b6","text":""},{"location":"notebooks/site_selection/#central-african-republic-kaga-bandoro","title":"Central African Republic - Kaga Bandoro\u00b6","text":""},{"location":"notebooks/site_selection/#mali-mopti","title":"Mali - Mopti\u00b6","text":""},{"location":"notebooks/site_selection/#syria-deir-ez-zor","title":"Syria - Deir ez-Zor\u00b6","text":""},{"location":"notebooks/site_selection/#democratic-republic-of-the-congo-katana","title":"Democratic Republic of the Congo - Katana\u00b6","text":""},{"location":"notebooks/site_selection/#peri-urban","title":"Peri-Urban\u00b6","text":""},{"location":"notebooks/site_selection/#morocco-oujda","title":"Morocco - Oujda\u00b6","text":""},{"location":"notebooks/site_selection/#india-raipur","title":"India - Raipur\u00b6","text":""},{"location":"notebooks/site_selection/#bangladesh-rangpur","title":"Bangladesh - Rangpur\u00b6","text":""},{"location":"notebooks/site_selection/#sri-lanka-kuranegala","title":"Sri Lanka - Kuranegala\u00b6","text":""},{"location":"notebooks/site_selection/#vietnam-can-tho","title":"Vietnam - Can Tho\u00b6","text":""},{"location":"notebooks/site_selection/#philippines-legazpi","title":"Philippines - Legazpi\u00b6","text":""},{"location":"notebooks/site_selection/#uzbekistan-qarshi","title":"Uzbekistan - Qarshi\u00b6","text":""},{"location":"notebooks/site_selection/#ghana-kumasi","title":"Ghana - Kumasi\u00b6","text":""},{"location":"notebooks/site_selection/#colombia-villavicencio","title":"Colombia - Villavicencio\u00b6","text":""},{"location":"notebooks/site_selection/#kenya-nakuru","title":"Kenya - Nakuru\u00b6","text":""},{"location":"notebooks/site_selection/#urban","title":"Urban\u00b6","text":""},{"location":"notebooks/site_selection/#nigeria-lagos","title":"Nigeria - Lagos\u00b6","text":""},{"location":"notebooks/site_selection/#india-new-delhi","title":"India - New Delhi\u00b6","text":""},{"location":"notebooks/site_selection/#china-shanghai","title":"China - Shanghai\u00b6","text":""},{"location":"notebooks/site_selection/#egypt-cairo","title":"Egypt - Cairo\u00b6","text":""},{"location":"notebooks/site_selection/#switzerland-zurich","title":"Switzerland - Zurich\u00b6","text":""},{"location":"notebooks/site_selection/#mexico-mexico-city","title":"Mexico - Mexico City\u00b6","text":""},{"location":"notebooks/site_selection/#japan-tokyo","title":"Japan - Tokyo\u00b6","text":""},{"location":"notebooks/site_selection/#pakistan-karachi","title":"Pakistan - Karachi\u00b6","text":""},{"location":"notebooks/site_selection/#usa-los-angeles","title":"USA - Los Angeles\u00b6","text":""},{"location":"notebooks/site_selection/#south-africa-pretoria","title":"South Africa - Pretoria\u00b6","text":""},{"location":"notebooks/study_areas/","title":"Study Areas","text":"In\u00a0[1]: Copied! <pre>import folium\nimport pygadm\nimport pandas as pd\nfrom shapely import unary_union\nfrom conflict_monitoring_ntl.case_studies import get_tiles_paths\nfrom conflict_monitoring_ntl.viz import plot_admin_map_with_tiles\nfrom conflict_monitoring_ntl.utils import (\n    get_raster_polygon, \n    reproject_gdf, \n    get_raster_gdf,\n)\n</pre> import folium import pygadm import pandas as pd from shapely import unary_union from conflict_monitoring_ntl.case_studies import get_tiles_paths from conflict_monitoring_ntl.viz import plot_admin_map_with_tiles from conflict_monitoring_ntl.utils import (     get_raster_polygon,      reproject_gdf,      get_raster_gdf, ) In\u00a0[2]: Copied! <pre>tiles_paths = get_tiles_paths()\n\ngdfs = []\n\nfor tiles_tuple in tiles_paths:\n    gdfs.append(get_raster_gdf(*tiles_tuple, crs=\"EPSG:4326\"))\n\ngdf = pd.concat(gdfs)\nglobal_centroid = unary_union(gdf.geometry).centroid\n</pre> tiles_paths = get_tiles_paths()  gdfs = []  for tiles_tuple in tiles_paths:     gdfs.append(get_raster_gdf(*tiles_tuple, crs=\"EPSG:4326\"))  gdf = pd.concat(gdfs) global_centroid = unary_union(gdf.geometry).centroid <p>General overview of the coverage:</p> In\u00a0[3]: Copied! <pre>m = folium.Map(\n    location=[global_centroid.y, global_centroid.x], \n    zoom_start=3, \n    tiles=\"CartoDB positron\"\n)\n\nfor _, row in gdf.iterrows():\n    folium.GeoJson(\n        data=row.geometry,\n        name=\"Tiles\",\n        style_function=lambda _: {\n            \"fillColor\": \"blue\",\n            \"color\": \"blue\",\n            \"weight\": 1\n        }\n    ).add_to(m)\n\nm\n</pre> m = folium.Map(     location=[global_centroid.y, global_centroid.x],      zoom_start=3,      tiles=\"CartoDB positron\" )  for _, row in gdf.iterrows():     folium.GeoJson(         data=row.geometry,         name=\"Tiles\",         style_function=lambda _: {             \"fillColor\": \"blue\",             \"color\": \"blue\",             \"weight\": 1         }     ).add_to(m)  m Out[3]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook In\u00a0[4]: Copied! <pre>country = \"Sudan\"\n\ntiles_paths = get_tiles_paths(country)\npolygon, crs = get_raster_polygon(*tiles_paths)\n\nraster_gdf = get_raster_gdf(*tiles_paths, crs=\"EPSG:4326\")\nadmin_gdf = pygadm.Items(name=country, content_level=2)\ncountry_gdf = pygadm.Items(name=country, content_level=0)\n\nadmin_gdf = reproject_gdf(admin_gdf, crs)\nadmin_gdf[\"is_within_raster\"] = admin_gdf[\"geometry_proj\"].apply(\n    lambda geom: geom.within(polygon)\n)\n</pre> country = \"Sudan\"  tiles_paths = get_tiles_paths(country) polygon, crs = get_raster_polygon(*tiles_paths)  raster_gdf = get_raster_gdf(*tiles_paths, crs=\"EPSG:4326\") admin_gdf = pygadm.Items(name=country, content_level=2) country_gdf = pygadm.Items(name=country, content_level=0)  admin_gdf = reproject_gdf(admin_gdf, crs) admin_gdf[\"is_within_raster\"] = admin_gdf[\"geometry_proj\"].apply(     lambda geom: geom.within(polygon) ) <p>Following regions are available:</p> In\u00a0[5]: Copied! <pre>regions_within = admin_gdf[admin_gdf.is_within_raster].NAME_2.tolist()\nprint(\", \".join(regions_within))\n</pre> regions_within = admin_gdf[admin_gdf.is_within_raster].NAME_2.tolist() print(\", \".join(regions_within)) <pre>Nyala, Tulus\n</pre> In\u00a0[6]: Copied! <pre>plot_admin_map_with_tiles(country_gdf, raster_gdf, admin_gdf, zoom_start=5)\n</pre> plot_admin_map_with_tiles(country_gdf, raster_gdf, admin_gdf, zoom_start=5) Out[6]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook <p>For a cleaner view of the remaining locations, code input has been concealed.</p> <p>Following regions are available:</p> <pre>Bandiagara, Bankass, Koro, Mopti\n</pre> Out[10]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook <p>Following regions are available:</p> <pre>Al-Hasakah, Al-Malikiyah, Al Qamishli, Ra's al-'Ayn, Ar-Raqqah, Tal Abyad\n</pre> Out[13]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook <p>Following regions are available:</p> <pre>D\u00e9koa, Kaga-Bandoro, Mbr\u00e8s, Bouca, Kabo\n</pre> Out[16]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook <p>Following regions are available:</p> <pre>Goma, Masisi, Nyiragongo, Rutshuru, Rutshuru (ville), Bukavu, Idjwi, Kabare, Kalehe, Kamituga, Uvira (ville), Walungu\n</pre> Out[19]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook <p>Following regions are available:</p> <pre>Al Buraiqeh, Al Mansura, Al Mualla, Ash Shaikh Outhman, Attawahi, Craiter, Dar Sad, Khur Maksar, Al Wade'a, Jayshan, Khanfir, Lawdar, Mudiyah, Rasad, Sarar, Sibah, Zingibar, Al A'rsh, Al Bayda, Al Bayda City, Al Malagim, Al Quraishyah, Ar Ryashyyah, As Sawadiyah, As Sawma'ah, Ash Sharyah, At Taffah, Az Zahir, Dhi Na'im, Maswarah, Mukayras, Na'man, Nati', Radman Al Awad, Sabah, Wald Rabi', Ad Dhale'e, Al Azariq, Al Husha, Al Hussein, Ash Shu'ayb, Damt, Jahaf, Juban, Qa'atabah, Al Garrahi, Al Hajjaylah, Al Mansuriyah, Al Mighlaf, As Sukhnah, Bura, Hays, Jabal Ra's, Zabid, Al Mahwait City, Bani Sa'd, Hufash, Milhan, Al Wahdah, As Sabain, Assafi'yah, At Tahrir, Ath'thaorah, Az'zal, Ma'ain, Old City, Shu'aub, Al Hada, Al Manar, Anss, Dawran Aness, Dhamar City, Jabal Ash sharq, Jahran, Maghirib Ans, Mayfa'at Anss, Utmah, Wusab Al Ali, Wusab As Safil, Al Dhihar, Al Makhadir, Al Mashannah, Al Qafr, Al Udayn, An Nadirah, Ar Radmah, As Sabrah, As Saddah, As Sayyani, Ash Sha'ir, Ba'dan, Dhi As Sufal, Far Al Udayn, Hazm Al Udayn, Hubaysh, Ibb, Jiblah, Mudhaykhirah, Yarim, Al Had, Al Hawtah, Al Madaribah Wa Al Arah, Al Maflahy, Al Maqatirah, Al Milah, Al Musaymir, Al Qabbaytah, Habil Jabr, Halimayn, Radfan, Tuban, Tur Al Bahah, Yafa'a, Yahr, Al Abdiyah, Al Jubah, Bidbadah, Harib, Harib Al Qaramish, Jabal Murad, Mahliyah, Marib City, Medghal, Rahabah, Sirwah, Al Jabin, Al Jafariyah, As Salafiyah, Bilad At Ta'am, Kusmah, Mazhar, Al Haymah Ad Dakhiliyah, Al Haymah Al Kharijiyah, Al Husn, Attyal, Bani Dhabyan, Bani Matar, Bilad Ar Rus, Jihanah, Khwlan, Manakhah, Sa'fan, Sanhan, Ain, Bayhan, Merkhah Al Ulya, Merkhah As Sufla, Usaylan, Al Ma'afer, Al Mawasit, Al Misrakh, Al Mudhaffar, Al Mukha, Al Qahirah, Al Wazi'iyah, As Silw, Ash Shamayatayn, At Ta'iziyah, Dhubab, Dimnat Khadir, Hayfan, Jabal Habashy, Maqbanah, Mashra'a Wa Hadnan, Mawiyah, Mawza, Sabir Al Mawadim, Salh, Sama, Shara'b Ar Rawnah, Shara'b As Salam\n</pre> Out[22]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook <p>Following regions are available:</p> <pre>Bahir Dar Special Zone, Wag Himra, Debubawi, Mehakelegnaw, Misraqawi\n</pre> Out[25]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook <p>Following regions are available:</p> <pre>Minbu, Buthidaung, Maungtaw, Sittwe\n</pre> Out[28]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook <p>Following regions are available:</p> <pre>Hong, Madagali, Michika, Mubi North, Mubi South, Askira/Uba, Bama, Chibok, Dikwa, Gubio, Guzamala, Gwoza, Jere, Kala/Balge, Konduga, Mafa, Maiduguri, Marte, Monguno, Ngala, Nganzai\n</pre> Out[31]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook <p>Following regions are available:</p> <pre>Akobo, Ayod, Wat, Yerol, Al Leiri\n</pre> Out[34]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"notebooks/study_areas/#study-areas","title":"Study Areas\u00b6","text":"<p>Our analysis is constrained by the limited availability of SDGSAT-1 satellite imagery across the Global South, with data currently covering only ten regions. Consequently, the study areas are restricted to these countries and their corresponding regions where valid imagery exists. The research focuses on administrative level 2 units, as defined by the Global Administrative Areas (GADM) dataset, as well as smaller settlements\u2014such as towns and villages\u2014identified through OpenStreetMap (OSM).</p> <p>NB! Currently, a good methodology for finding towns / villages from OSM has not been found.</p> <p>The subsequent analysis presents the specific countries and administrative units that can be included based on the spatial coverage of SDGSAT-1 tiles and illustrates the distribution of smaller populated areas within these boundaries.</p>"},{"location":"notebooks/study_areas/#sudan","title":"Sudan\u00b6","text":""},{"location":"notebooks/study_areas/#mali","title":"Mali\u00b6","text":""},{"location":"notebooks/study_areas/#syria","title":"Syria\u00b6","text":""},{"location":"notebooks/study_areas/#central-african-republic","title":"Central African Republic\u00b6","text":""},{"location":"notebooks/study_areas/#democratic-republic-of-the-congo","title":"Democratic Republic of the Congo\u00b6","text":""},{"location":"notebooks/study_areas/#yemen","title":"Yemen\u00b6","text":""},{"location":"notebooks/study_areas/#ethiopia","title":"Ethiopia\u00b6","text":""},{"location":"notebooks/study_areas/#myanmar","title":"Myanmar\u00b6","text":""},{"location":"notebooks/study_areas/#nigeria","title":"Nigeria\u00b6","text":""},{"location":"notebooks/study_areas/#south-sudan","title":"South Sudan\u00b6","text":""},{"location":"system_design/sdk/","title":"SDK-s","text":""},{"location":"system_design/sdk/#datasources","title":"Datasources","text":""},{"location":"system_design/sdk/#landsat-8","title":"Landsat 8","text":"<ul> <li>API Access: USGS JSON API</li> <li>Python Tooling: <code>landsatxplore</code><ul> <li>Provides a Python and CLI interface to EarthExplorer for searching and downloading scenes.</li> <li>Status: Not actively maintained (for alternatives, see project issues or consider direct API calls).</li> </ul> </li> </ul>"},{"location":"system_design/sdk/#enmap","title":"EnMAP","text":"<ul> <li>Portal Access: EOWEB Geoportal</li> <li>Note: No direct API or programmatic download available; files must be placed on the local file system before use.</li> </ul>"},{"location":"system_design/sdk/#sdgsat","title":"SDGSat","text":"<ul> <li>Limited SDGSat coverage is available from pre-downloaded files.</li> <li>Data location and structure are detailed in the project\u2019s documentation (see Filip\u2019s notes).</li> </ul> <code>L4A_A</code> vs <code>L4A_B</code> <p>What is the difference between files with same names, but different endings <code>L4A_A</code> and <code>L4A_B</code>?</p>"},{"location":"system_design/sdk/#black-marble","title":"Black Marble","text":"<ul> <li>Python SDK: <code>blackmarblepy</code></li> <li>Note: Some groups (e.g., ETH Zurich) use a forked version due to concerns about the original SDK\u2019s reliability and support.</li> </ul>"},{"location":"system_design/sdk/#architecture","title":"Architecture","text":""},{"location":"system_design/sdk/#phase-1-sdk-layer","title":"Phase 1: SDK Layer","text":"<ul> <li>Define a shared interface for <code>raster</code>, following a similar approach to <code>blackmarblepy</code>.</li> <li>Read files directly using the existing pre-configured filesystem logic.</li> <li>Provide a unified raster method that returns an <code>xarray.Dataset</code>.</li> </ul>"},{"location":"system_design/sdk/#phase-2-api","title":"Phase 2: API","text":"<ul> <li>Use FastAPI to serve local TIFF files through an API.</li> <li>Take inspiration from the Sentinel API or Black Marble API design.</li> </ul> <p> SensorComparisonSDGSat (SDK)EnMAP (SDK)BlackMarblePylandsatxplorelocal filesystemlocal filesystemBlack MarbleLandsat 8API (fastapi)API (fastapi)NASA APIUSGS API raster()raster()raster()  Hold \"Alt\" / \"Option\" to enable pan &amp; zoom  </p> Color Coding <p>Phase 1 components are shown in blue, existing elements in grey, and API interfaces planned for Phase 2 are highlighted in purple (subject to available time).</p>"}]}